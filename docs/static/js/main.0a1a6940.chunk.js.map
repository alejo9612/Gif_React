{"version":3,"sources":["components/CategoriAdd.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoriAdd","setCategoria","useState","InputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categoria","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGif","a","url","encodeURI","fetch","resp","json","data","gifApp","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","i","ReactDOM","render","document","getElementById"],"mappings":"oNAGMA,EAAa,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAGjB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAa,SAAAS,GAAS,OAAKP,GAAL,mBAAoBO,OAC1CN,EAAc,MAMlB,SACE,uBACCO,KAAK,OACLC,MAAOT,EACPU,SApBkB,SAACP,GACtBF,EAAcE,EAAEQ,OAAOF,aAyB/BZ,EAAYe,UAAY,CACpBd,aAAce,IAAUC,KAAKC,YAGlBlB,Q,+BCpCFmB,EAAM,uCAAG,WAAOT,GAAP,uBAAAU,EAAA,6DAEZC,EAFY,iDAEoCC,UAAWZ,GAF/C,+DAICa,MAAMF,GAJP,cAIZG,EAJY,gBAKGA,EAAKC,OALR,uBAKXC,EALW,EAKXA,KAEDC,EAASD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EAC1B,MAAM,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QAXrB,kBAeXM,GAfW,4CAAH,sDCANO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,OAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFFO,EAAU,SAAC,GAAiB,IAAhB5B,EAAe,EAAfA,UAMrB,ECNwB,SAACA,GAGzB,MAA0BR,mBAAS,CAC/BwB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAXAC,qBAAU,WACNvB,EAAOT,GACFiC,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAKkB,EACLL,SAAS,SAGtB,CAAC7B,IAGG8B,EDdwBK,CAAanC,GAAhCsB,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAUpB,OACI,qCACA,6BAAK7B,IAEJ6B,GAAW,2CAEZ,qBAAKJ,UAAU,0BAAf,SAGIH,EAAOJ,KAAI,SAAAC,GACP,OAAO,cAAC,EAAD,eAEHA,GADCA,EAAIC,aEGVgB,EA9BM,WAEjB,MAAmC5C,mBAAS,CAAC,WAA7C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAQA,OAEI,cADA,CACA,sBACA,8CACA,cAAC,EAAD,CAAaA,aAAcA,IAC3B,uBAEA,6BAEI8C,EAAWnB,KAAI,SAAClB,EAAWsC,GACvB,OAAO,cAAC,EAAD,CAEPtC,UAAWA,GADNA,Y,MCpBrBuC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0a1a6940.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst CategoriAdd =({setCategoria}) => {\r\n\r\n    //me crea la variable y la funnción mediante el hook\r\n    const [InputValue, setInputValue] = useState('');\r\n\r\n    const handleInputValue = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        //insertamos la nueva definición de la variable antes de mostrar el array\r\n        if (InputValue.trim().length > 2) {\r\n            setCategoria(categoria => [InputValue, ...categoria]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    //retornamos los datos llamando las funciones que realizamos antes\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n           type=\"text\"\r\n           value={InputValue}\r\n           onChange={handleInputValue}/>\r\n        </form>\r\n    )\r\n}\r\n\r\n//creamos el prop de agregar categorias\r\nCategoriAdd.prototype = {\r\n    setCategoria: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CategoriAdd;","\r\n\r\nexport const getGif = async( categoria) =>{\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( categoria )}&limit=10&api_key=iX8Wtk8aW436ZWquW4KKBnm8G3GIWKEl`;\r\n\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifApp = data.map(img =>{\r\n        return{\r\n        id: img.id,\r\n        title: img.title,\r\n        url:  img.images?.downsized_medium.url\r\n    }\r\n});\r\n\r\n    return gifApp;\r\n    //console.log(gifApp);\r\n    //setImages(gifApp);\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className='card'>\r\n           <img src={url} alt={title}/>\r\n           <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n//import { getGif } from '../helpers/GetGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({categoria}) => {\r\n\r\n    \r\n    // const [Images, setImages] = useState([]);\r\n\r\n    //asiganamos un nuevo nombre a la destructuración que hacemos\r\n    const {data:images, loading} = useFetchGifs(categoria);\r\n    // useEffect(() => {\r\n    //    //getGif();\r\n    //    //remplazamos para poder traer una promesa del nuevo helper y traemos los datos\r\n    //    getGif(categoria)\r\n    //         .then(img => setImages(img))\r\n    // }, [categoria])\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n        <h3>{categoria}</h3>\r\n        \r\n        {loading && <p>Loading...</p>}\r\n\r\n        <div className=\"Card-grid animate__tada\">\r\n        \r\n        {\r\n            images.map(img  =>{\r\n                return <GifGridItem \r\n                key={img.id}\r\n                {...img}\r\n                />\r\n            })\r\n        }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport {getGif} from '../helpers/GetGifs';\r\n\r\n\r\n//nos creamos una función normal que llevará nustra logica y se utilizará como un custom hook\r\nexport const useFetchGifs = (categoria) => {\r\n\r\n    //creamos el useState para crear el objeto que majearemos con la información que requerimos\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    \r\n    //creamos el useEffect para manejar el efecto que le daremos a nuestro objeto del useState\r\n    useEffect(() => {\r\n        getGif(categoria)\r\n            .then(imgs =>{\r\n                setstate({\r\n                    data:imgs,\r\n                    loading: false\r\n                })\r\n            })\r\n    }, [categoria]);\r\n\r\n    ///esto me retorna el state que es: data[], loading\r\n    return state;\r\n\r\n}\r\n","import React,{ useState }  from 'react'\r\nimport CategoriAdd from './components/CategoriAdd';\r\nimport {GifGrid}  from './components/GifGrid';\r\n\r\n\r\nconst GifExpertApp = () =>{\r\n  \r\n    const [categorias, setCategoria] = useState(['Naruto']);\r\n\r\n    //const handleAdd = () =>{\r\n    //    const add = 'Avengers';\r\n    //cuando tenemos un arreglo es importante que //en la función del set se debe de abrir el array //que se tiene para poder incluir sus elementos, //es decir con los ... + el valor nuevo\r\n    // setCategoria( [...categorias, add]);\r\n    //}\r\n\r\n    return(\r\n        //retornamos lo que deseamos mostrar principalmente\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <CategoriAdd setCategoria={setCategoria}/>\r\n        <hr/>\r\n\r\n        <ul>\r\n            {   //recorremos las catgorias para traerlas\r\n            categorias.map((categoria, i) =>{\r\n                return <GifGrid \r\n                key={categoria}\r\n                categoria={categoria}/>\r\n            })\r\n        }\r\n        </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}